#include <system.h>
#include    "NDKernel8.c"       /* includes operating system */
#pragma CLOCK_FREQ 4000000
#pragma DATA 0x2007, _HS_OSC & _WDT_OFF & _LVP_OFF & _CP_ALL

//      Lab 8 - PWM DAC
//  EE21224 - Fall 2010
//  Zach Stauder and Alex Toombs
//      PWM output testing from terminal version


//*BE SURE YOU HAVE DOWNLOADED THE CORRECT KERNAL FILE!!!!!!!

void display_digit(int data){
//trisc=0x00;

unsigned char digitdata;
unsigned char rate=SPI_62kHz;

switch(data){
      case 0:
              digitdata=0x3F;
              break;
      case 1:
              digitdata=0x6;
              break;
      case 2:
              digitdata=0x5B;
              break;
      case 3:
              digitdata=0x4F;
              break;
      case 4:
              digitdata=0x66;
              break;
      case 5:
              digitdata=0x6D;
              break;
      case 6:
              digitdata=0x7D;
              break;
      case 7:
              digitdata=0x7;
              break;
      case 8:
              digitdata=0x7F;
              break;
      case 9:
              digitdata=0x67;
              break;
      }
shiftout(digitdata,rate);
}


void OutputVoltage(int data){

enable_sci();

long PCNT;
int pwm_period = 49;    //ENTER THE VALUE YOU CALCULATED!!!!
long duty_cycle;
//int v_out_msb = 0;
display_digit(0);                                       //set display to a zero
//trisc = 0x00;                                   //*sets port d to outputs

serial_init(12);                //sets baud rate for terminal
                              // 12 is 19200 for a 4MHz clock
pwm_init(pwm_period);           //initialize PWM output and specify
PWM period
//infinite loop

PCNT = (60*data)/64;
duty_cycle = (((PCNT*((pwm_period+1)*4))/100)/4);
ccpr1l = (duty_cycle);
}



void main(void) {               /* main program start */


 int guess = 0;
      int upper;
      int lower;
      int i = 0;
      int N = 7;

      trisb |= bit(3);
  trisd &=~bit(0);
      trisd &=~bit(1);
     // portd &=~bit(0);
      //portd &=~bit(1);

     while(1){
              upper = 64;
              lower = 0;
              for (i=0;i<N;i++){
                      guess = (upper + lower)/2;
                      OutputVoltage(guess);
                      delay_ms(5);                    //pause to let
the output to settle before checking.
                      if((portb & bit(3))==0){
upper = guess;}
                      else{ lower = guess;}
              }

       for(int j=0;j<100;j++){
              display_digit(guess/10);
              portd |=bit(1);
              delay_ms(17);
              portd &=~bit(1);
              display_digit(guess%10);
              portd |=bit(0);
              delay_ms(17);
              portd &=~bit(0);
        }

      }
}